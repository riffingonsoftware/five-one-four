"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __defProps = Object.defineProperties;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropDescs = Object.getOwnPropertyDescriptors;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __spreadProps = (a, b) => __defProps(a, __getOwnPropDescs(b));
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var __async = (__this, __arguments, generator) => {
  return new Promise((resolve, reject) => {
    var fulfilled = (value) => {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    };
    var rejected = (value) => {
      try {
        step(generator.throw(value));
      } catch (e) {
        reject(e);
      }
    };
    var step = (x) => x.done ? resolve(x.value) : Promise.resolve(x.value).then(fulfilled, rejected);
    step((generator = generator.apply(__this, __arguments)).next());
  });
};

// src/index.ts
var src_exports = {};
__export(src_exports, {
  ClickHouseEngines: () => ClickHouseEngines,
  ConsumptionHelpers: () => ConsumptionHelpers,
  IngestionFormat: () => IngestionFormat,
  MooseClient: () => MooseClient,
  Sql: () => Sql,
  antiCachePath: () => antiCachePath,
  cliLog: () => cliLog,
  createAggregation: () => createAggregation,
  createClickhouseParameter: () => createClickhouseParameter,
  createMaterializedView: () => createMaterializedView,
  createTable: () => createTable,
  dropAggregation: () => dropAggregation,
  dropTable: () => dropTable,
  dropView: () => dropView,
  getClickhouseClient: () => getClickhouseClient,
  getFileName: () => getFileName,
  getValueFromParameter: () => getValueFromParameter,
  join_queries: () => join_queries,
  mapToClickHouseType: () => mapToClickHouseType,
  populateTable: () => populateTable,
  sql: () => sql,
  walkDir: () => walkDir
});
module.exports = __toCommonJS(src_exports);

// src/blocks.ts
var ClickHouseEngines = /* @__PURE__ */ ((ClickHouseEngines2) => {
  ClickHouseEngines2["MergeTree"] = "MergeTree";
  ClickHouseEngines2["ReplacingMergeTree"] = "ReplacingMergeTree";
  ClickHouseEngines2["SummingMergeTree"] = "SummingMergeTree";
  ClickHouseEngines2["AggregatingMergeTree"] = "AggregatingMergeTree";
  ClickHouseEngines2["CollapsingMergeTree"] = "CollapsingMergeTree";
  ClickHouseEngines2["VersionedCollapsingMergeTree"] = "VersionedCollapsingMergeTree";
  ClickHouseEngines2["GraphiteMergeTree"] = "GraphiteMergeTree";
  return ClickHouseEngines2;
})(ClickHouseEngines || {});
function dropAggregation(options) {
  return [dropView(options.viewName), dropTable(options.tableName)];
}
function dropTable(name) {
  return `DROP TABLE IF EXISTS ${name}`.trim();
}
function dropView(name) {
  return `DROP VIEW IF EXISTS ${name}`.trim();
}
function createAggregation(options) {
  return [
    createTable(options.tableCreateOptions),
    createMaterializedView({
      name: options.materializedViewName,
      destinationTable: options.tableCreateOptions.name,
      select: options.select
    }),
    populateTable({
      destinationTable: options.tableCreateOptions.name,
      select: options.select
    })
  ];
}
function createMaterializedView(options) {
  return `CREATE MATERIALIZED VIEW IF NOT EXISTS ${options.name} 
        TO ${options.destinationTable}
        AS ${options.select}`.trim();
}
function createTable(options) {
  const columnDefinitions = Object.entries(options.columns).map(([name, type]) => `${name} ${type}`).join(",\n");
  const orderByClause = options.orderBy ? `ORDER BY ${options.orderBy}` : "";
  const engine = options.engine || "MergeTree" /* MergeTree */;
  return `
    CREATE TABLE IF NOT EXISTS ${options.name} 
    (
      ${columnDefinitions}
    )
    ENGINE = ${engine}()
    ${orderByClause}
  `.trim();
}
function populateTable(options) {
  return `INSERT INTO ${options.destinationTable}
          ${options.select}`.trim();
}

// src/commons.ts
var import_client_web = require("@clickhouse/client-web");
var import_node_fs = __toESM(require("fs"));
var import_node_path = __toESM(require("path"));
var import_http = __toESM(require("http"));
var antiCachePath = (path2) => `${path2}?num=${Math.random().toString()}&time=${Date.now()}`;
var walkDir = (dir, fileExtension, fileList) => {
  const files = import_node_fs.default.readdirSync(dir);
  files.forEach((file) => {
    if (import_node_fs.default.statSync(import_node_path.default.join(dir, file)).isDirectory()) {
      fileList = walkDir(import_node_path.default.join(dir, file), fileExtension, fileList);
    } else if (file.endsWith(fileExtension)) {
      fileList.push(import_node_path.default.join(dir, file));
    }
  });
  return fileList;
};
var getFileName = (filePath) => {
  const regex = /\/([^\/]+)\.ts/;
  const matches = filePath.match(regex);
  if (matches && matches.length > 1) {
    return matches[1];
  }
  return "";
};
var getClickhouseClient = ({
  username,
  password,
  database,
  useSSL,
  host,
  port
}) => {
  const protocol = useSSL === "1" || useSSL.toLowerCase() === "true" ? "https" : "http";
  console.log(`Connecting to Clickhouse at ${protocol}://${host}:${port}`);
  return (0, import_client_web.createClient)({
    url: `${protocol}://${host}:${port}`,
    username,
    password,
    database
  });
};
var cliLog = (log) => {
  const req = import_http.default.request({
    port: 4e3,
    method: "POST",
    path: "/logs"
  });
  req.write(JSON.stringify(__spreadValues({ message_type: "Info" }, log)));
  req.end();
};

// src/consumption-helpers.ts
var mapToClickHouseType = (value) => {
  if (typeof value === "number") {
    if (value % 1 !== 0)
      return "Float";
    return "Int";
  }
  if (typeof value === "boolean")
    return "Bool";
  if (value instanceof Date)
    return "DateTime";
  if (Array.isArray(value)) {
    const [type, _] = value;
    return type;
  }
  return "String";
};
var getValueFromParameter = (value) => {
  if (Array.isArray(value)) {
    const [type, val] = value;
    if (type === "Identifier")
      return val;
  }
  return value;
};
function createClickhouseParameter(parameterIndex, value) {
  return `{p${parameterIndex}:${mapToClickHouseType(value)}}`;
}
var Sql = class _Sql {
  constructor(rawStrings, rawValues) {
    if (rawStrings.length - 1 !== rawValues.length) {
      if (rawStrings.length === 0) {
        throw new TypeError("Expected at least 1 string");
      }
      throw new TypeError(
        `Expected ${rawStrings.length} strings to have ${rawStrings.length - 1} values`
      );
    }
    const valuesLength = rawValues.reduce(
      (len, value) => len + (value instanceof _Sql ? value.values.length : 1),
      0
    );
    this.values = new Array(valuesLength);
    this.strings = new Array(valuesLength + 1);
    this.strings[0] = rawStrings[0];
    let i = 0, pos = 0;
    while (i < rawValues.length) {
      const child = rawValues[i++];
      const rawString = rawStrings[i];
      if (child instanceof _Sql) {
        this.strings[pos] += child.strings[0];
        let childIndex = 0;
        while (childIndex < child.values.length) {
          this.values[pos++] = child.values[childIndex++];
          this.strings[pos] = child.strings[childIndex];
        }
        this.strings[pos] += rawString;
      } else {
        this.values[pos++] = child;
        this.strings[pos] = rawString;
      }
    }
  }
};
function sql(strings, ...values) {
  return new Sql(strings, values);
}
function emptyIfUndefined(value) {
  return value === void 0 ? "" : value;
}
var MooseClient = class {
  constructor(client) {
    this.client = client;
  }
  query(sql2) {
    return __async(this, null, function* () {
      const parameterizedStubs = sql2.values.map(
        (v, i) => createClickhouseParameter(i, v)
      );
      const query = sql2.strings.map(
        (s, i) => s != "" ? `${s}${emptyIfUndefined(parameterizedStubs[i])}` : ""
      ).join("");
      const query_params = sql2.values.reduce(
        (acc, v, i) => __spreadProps(__spreadValues({}, acc), {
          [`p${i}`]: getValueFromParameter(v)
        }),
        {}
      );
      return this.client.query({
        query,
        query_params,
        format: "JSONEachRow"
      });
    });
  }
};
var ConsumptionHelpers = {
  column: (value) => ["Identifier", value],
  table: (value) => ["Identifier", value]
};
function join_queries({
  values,
  separator = ",",
  prefix = "",
  suffix = ""
}) {
  if (values.length === 0) {
    throw new TypeError(
      "Expected `join([])` to be called with an array of multiple elements, but got an empty array"
    );
  }
  return new Sql(
    [prefix, ...Array(values.length - 1).fill(separator), suffix],
    values
  );
}

// src/index.ts
var IngestionFormat = /* @__PURE__ */ ((IngestionFormat2) => {
  IngestionFormat2["JSON"] = "JSON";
  IngestionFormat2["JSON_ARRAY"] = "JSON_ARRAY";
  return IngestionFormat2;
})(IngestionFormat || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ClickHouseEngines,
  ConsumptionHelpers,
  IngestionFormat,
  MooseClient,
  Sql,
  antiCachePath,
  cliLog,
  createAggregation,
  createClickhouseParameter,
  createMaterializedView,
  createTable,
  dropAggregation,
  dropTable,
  dropView,
  getClickhouseClient,
  getFileName,
  getValueFromParameter,
  join_queries,
  mapToClickHouseType,
  populateTable,
  sql,
  walkDir
});
//# sourceMappingURL=index.js.map