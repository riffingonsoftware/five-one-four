{"version":3,"sources":["../src/index.ts","../src/blocks.ts","../src/commons.ts","../src/consumption-helpers.ts"],"sourcesContent":["import { MooseClient, sql } from \"./consumption-helpers\";\nexport interface Aggregation {\n  select: string;\n  orderBy: string;\n}\n\nexport type Key<T extends string | number | Date> = T;\n\nexport interface ConsumptionUtil {\n  client: MooseClient;\n\n  // SQL interpolator\n  sql: typeof sql;\n}\n\nexport enum IngestionFormat {\n  JSON = \"JSON\",\n  JSON_ARRAY = \"JSON_ARRAY\",\n}\n\nexport type DataModelConfig<T> = Partial<{\n  ingestion: {\n    format?: IngestionFormat;\n  };\n  storage: {\n    enabled?: boolean;\n    order_by_fields?: (keyof T)[];\n  };\n}>;\n\nexport * from \"./blocks\";\nexport * from \"./commons\";\nexport * from \"./consumption-helpers\";\n","interface AggregationCreateOptions {\n  tableCreateOptions: TableCreateOptions;\n  materializedViewName: string;\n  select: string;\n}\n\ninterface AggregationDropOptions {\n  viewName: string;\n  tableName: string;\n}\n\ninterface MaterializedViewCreateOptions {\n  name: string;\n  destinationTable: string;\n  select: string;\n}\n\ninterface PopulateTableOptions {\n  destinationTable: string;\n  select: string;\n}\n\ninterface TableCreateOptions {\n  name: string;\n  columns: Record<string, string>;\n  engine?: ClickHouseEngines;\n  orderBy?: string;\n}\n\nexport interface Blocks {\n  setup: string[];\n  teardown: string[];\n}\n\nexport enum ClickHouseEngines {\n  MergeTree = \"MergeTree\",\n  ReplacingMergeTree = \"ReplacingMergeTree\",\n  SummingMergeTree = \"SummingMergeTree\",\n  AggregatingMergeTree = \"AggregatingMergeTree\",\n  CollapsingMergeTree = \"CollapsingMergeTree\",\n  VersionedCollapsingMergeTree = \"VersionedCollapsingMergeTree\",\n  GraphiteMergeTree = \"GraphiteMergeTree\",\n}\n\n/**\n * Drops an aggregation's view & underlying table.\n */\nexport function dropAggregation(options: AggregationDropOptions): string[] {\n  return [dropView(options.viewName), dropTable(options.tableName)];\n}\n\n/**\n * Drops an existing table if it exists.\n */\nexport function dropTable(name: string): string {\n  return `DROP TABLE IF EXISTS ${name}`.trim();\n}\n\n/**\n * Drops an existing view if it exists.\n */\nexport function dropView(name: string): string {\n  return `DROP VIEW IF EXISTS ${name}`.trim();\n}\n\n/**\n * Creates an aggregation which includes a table, materialized view, and initial data load.\n */\nexport function createAggregation(options: AggregationCreateOptions): string[] {\n  return [\n    createTable(options.tableCreateOptions),\n    createMaterializedView({\n      name: options.materializedViewName,\n      destinationTable: options.tableCreateOptions.name,\n      select: options.select,\n    }),\n    populateTable({\n      destinationTable: options.tableCreateOptions.name,\n      select: options.select,\n    }),\n  ];\n}\n\n/**\n * Creates a materialized view.\n */\nexport function createMaterializedView(\n  options: MaterializedViewCreateOptions,\n): string {\n  return `CREATE MATERIALIZED VIEW IF NOT EXISTS ${options.name} \n        TO ${options.destinationTable}\n        AS ${options.select}`.trim();\n}\n\n/**\n * Creates a new table with default MergeTree engine.\n */\nexport function createTable(options: TableCreateOptions): string {\n  const columnDefinitions = Object.entries(options.columns)\n    .map(([name, type]) => `${name} ${type}`)\n    .join(\",\\n\");\n\n  const orderByClause = options.orderBy ? `ORDER BY ${options.orderBy}` : \"\";\n\n  const engine = options.engine || ClickHouseEngines.MergeTree;\n\n  return `\n    CREATE TABLE IF NOT EXISTS ${options.name} \n    (\n      ${columnDefinitions}\n    )\n    ENGINE = ${engine}()\n    ${orderByClause}\n  `.trim();\n}\n\n/**\n * Populates a table with data.\n */\nexport function populateTable(options: PopulateTableOptions): string {\n  return `INSERT INTO ${options.destinationTable}\n          ${options.select}`.trim();\n}\n","import { createClient } from \"@clickhouse/client-web\";\nimport fs from \"node:fs\";\nimport path from \"node:path\";\nimport http from \"http\";\n\nexport const antiCachePath = (path: string) =>\n  `${path}?num=${Math.random().toString()}&time=${Date.now()}`;\n\nexport const walkDir = (\n  dir: string,\n  fileExtension: string,\n  fileList: string[],\n) => {\n  const files = fs.readdirSync(dir);\n\n  files.forEach((file) => {\n    if (fs.statSync(path.join(dir, file)).isDirectory()) {\n      fileList = walkDir(path.join(dir, file), fileExtension, fileList);\n    } else if (file.endsWith(fileExtension)) {\n      fileList.push(path.join(dir, file));\n    }\n  });\n\n  return fileList;\n};\n\nexport const getFileName = (filePath: string) => {\n  const regex = /\\/([^\\/]+)\\.ts/;\n  const matches = filePath.match(regex);\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n  return \"\";\n};\n\ninterface ClientConfig {\n  username: string;\n  password: string;\n  database: string;\n  useSSL: string;\n  host: string;\n  port: string;\n}\n\nexport const getClickhouseClient = ({\n  username,\n  password,\n  database,\n  useSSL,\n  host,\n  port,\n}: ClientConfig) => {\n  const protocol =\n    useSSL === \"1\" || useSSL.toLowerCase() === \"true\" ? \"https\" : \"http\";\n  console.log(`Connecting to Clickhouse at ${protocol}://${host}:${port}`);\n  return createClient({\n    url: `${protocol}://${host}:${port}`,\n    username: username,\n    password: password,\n    database: database,\n  });\n};\n\ntype CliLogData = {\n  message_type?: \"Info\" | \"Success\" | \"Error\" | \"Highlight\";\n  action: string;\n  message: string;\n};\nexport const cliLog: (log: CliLogData) => void = (log) => {\n  const req = http.request({\n    port: 4000,\n    method: \"POST\",\n    path: \"/logs\",\n  }); // no callback, fire and forget\n\n  req.write(JSON.stringify({ message_type: \"Info\", ...log }));\n  req.end();\n};\n","/**\n * Convert the JS type (source is JSON format by API query parameter) to the corresponding ClickHouse type for generating named placeholder of parameterized query.\n * Only support to convert number to Int or Float, boolean to Bool, string to String, other types will convert to String.\n * If exist complex type e.g: object, Array, null, undefined, Date, Record.. etc, just convert to string type by ClickHouse function in SQL.\n * ClickHouse support converting string to other types function.\n * Please see Each section of the https://clickhouse.com/docs/en/sql-reference/functions and https://clickhouse.com/docs/en/sql-reference/functions/type-conversion-functions\n * @param value\n * @returns 'FLoat', 'Int', 'Bool', 'String'\n */\n\nimport { ClickHouseClient } from \"@clickhouse/client-web\";\n\nexport const mapToClickHouseType = (value: Value) => {\n  if (typeof value === \"number\") {\n    // infer the float or int according to exist remainder or not\n    if (value % 1 !== 0) return \"Float\";\n    return \"Int\";\n  }\n  // When define column type or query result with parameterized query, The Bool or Boolean type both supported.\n  // But the column type of query result only return Bool, so we only support Bool type for safety.\n  if (typeof value === \"boolean\") return \"Bool\";\n  if (value instanceof Date) return \"DateTime\";\n  if (Array.isArray(value)) {\n    const [type, _] = value;\n    return type;\n  }\n  return \"String\";\n};\n\nexport const getValueFromParameter = (value: any) => {\n  if (Array.isArray(value)) {\n    const [type, val] = value;\n    if (type === \"Identifier\") return val;\n  }\n  return value;\n};\n\nexport function createClickhouseParameter(\n  parameterIndex: number,\n  value: Value,\n) {\n  // ClickHouse use {name:type} be a placeholder, so if we only use number string as name e.g: {1:Unit8}\n  // it will face issue when converting to the query params => {1: value1}, because the key is value not string type, so here add prefix \"p\" to avoid this issue.\n  return `{p${parameterIndex}:${mapToClickHouseType(value)}}`;\n}\n\n// source https://github.com/blakeembrey/sql-template-tag/blob/main/src/index.ts\n/**\n * Values supported by SQL engine.\n */\nexport type Value = string | number | boolean | Date | [string, string];\n\n/**\n * Supported value or SQL instance.\n */\nexport type RawValue = Value | Sql;\n\n/**\n * A SQL instance can be nested within each other to build SQL strings.\n */\nexport class Sql {\n  readonly values: Value[];\n  readonly strings: string[];\n\n  constructor(rawStrings: readonly string[], rawValues: readonly RawValue[]) {\n    if (rawStrings.length - 1 !== rawValues.length) {\n      if (rawStrings.length === 0) {\n        throw new TypeError(\"Expected at least 1 string\");\n      }\n\n      throw new TypeError(\n        `Expected ${rawStrings.length} strings to have ${\n          rawStrings.length - 1\n        } values`,\n      );\n    }\n\n    const valuesLength = rawValues.reduce<number>(\n      (len: number, value: RawValue) =>\n        len + (value instanceof Sql ? value.values.length : 1),\n      0,\n    );\n\n    this.values = new Array(valuesLength);\n    this.strings = new Array(valuesLength + 1);\n\n    this.strings[0] = rawStrings[0];\n\n    // Iterate over raw values, strings, and children. The value is always\n    // positioned between two strings, e.g. `index + 1`.\n    let i = 0,\n      pos = 0;\n    while (i < rawValues.length) {\n      const child = rawValues[i++];\n      const rawString = rawStrings[i];\n\n      // Check for nested `sql` queries.\n      if (child instanceof Sql) {\n        // Append child prefix text to current string.\n        this.strings[pos] += child.strings[0];\n\n        let childIndex = 0;\n        while (childIndex < child.values.length) {\n          this.values[pos++] = child.values[childIndex++];\n          this.strings[pos] = child.strings[childIndex];\n        }\n\n        // Append raw string to current string.\n        this.strings[pos] += rawString;\n      } else {\n        this.values[pos++] = child;\n        this.strings[pos] = rawString;\n      }\n    }\n  }\n}\n\nexport function sql(\n  strings: readonly string[],\n  ...values: readonly RawValue[]\n) {\n  return new Sql(strings, values);\n}\n\nfunction emptyIfUndefined(value: string | undefined): string {\n  return value === undefined ? \"\" : value;\n}\n\nexport class MooseClient {\n  client: ClickHouseClient;\n  constructor(client: ClickHouseClient) {\n    this.client = client;\n  }\n\n  async query(sql: Sql) {\n    const parameterizedStubs = sql.values.map((v, i) =>\n      createClickhouseParameter(i, v),\n    );\n\n    const query = sql.strings\n      .map((s, i) =>\n        s != \"\" ? `${s}${emptyIfUndefined(parameterizedStubs[i])}` : \"\",\n      )\n      .join(\"\");\n\n    const query_params = sql.values.reduce(\n      (acc: Record<string, unknown>, v, i) => ({\n        ...acc,\n        [`p${i}`]: getValueFromParameter(v),\n      }),\n      {},\n    );\n\n    return this.client.query({\n      query,\n      query_params,\n      format: \"JSONEachRow\",\n    });\n  }\n}\n\nexport const ConsumptionHelpers = {\n  column: (value: string) => [\"Identifier\", value] as [string, string],\n  table: (value: string) => [\"Identifier\", value] as [string, string],\n};\n\nexport function join_queries({\n  values,\n  separator = \",\",\n  prefix = \"\",\n  suffix = \"\",\n}: {\n  values: readonly RawValue[];\n  separator?: string;\n  prefix?: string;\n  suffix?: string;\n}) {\n  if (values.length === 0) {\n    throw new TypeError(\n      \"Expected `join([])` to be called with an array of multiple elements, but got an empty array\",\n    );\n  }\n\n  return new Sql(\n    [prefix, ...Array(values.length - 1).fill(separator), suffix],\n    values,\n  );\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACkCO,IAAK,oBAAL,kBAAKA,uBAAL;AACL,EAAAA,mBAAA,eAAY;AACZ,EAAAA,mBAAA,wBAAqB;AACrB,EAAAA,mBAAA,sBAAmB;AACnB,EAAAA,mBAAA,0BAAuB;AACvB,EAAAA,mBAAA,yBAAsB;AACtB,EAAAA,mBAAA,kCAA+B;AAC/B,EAAAA,mBAAA,uBAAoB;AAPV,SAAAA;AAAA,GAAA;AAaL,SAAS,gBAAgB,SAA2C;AACzE,SAAO,CAAC,SAAS,QAAQ,QAAQ,GAAG,UAAU,QAAQ,SAAS,CAAC;AAClE;AAKO,SAAS,UAAU,MAAsB;AAC9C,SAAO,wBAAwB,IAAI,GAAG,KAAK;AAC7C;AAKO,SAAS,SAAS,MAAsB;AAC7C,SAAO,uBAAuB,IAAI,GAAG,KAAK;AAC5C;AAKO,SAAS,kBAAkB,SAA6C;AAC7E,SAAO;AAAA,IACL,YAAY,QAAQ,kBAAkB;AAAA,IACtC,uBAAuB;AAAA,MACrB,MAAM,QAAQ;AAAA,MACd,kBAAkB,QAAQ,mBAAmB;AAAA,MAC7C,QAAQ,QAAQ;AAAA,IAClB,CAAC;AAAA,IACD,cAAc;AAAA,MACZ,kBAAkB,QAAQ,mBAAmB;AAAA,MAC7C,QAAQ,QAAQ;AAAA,IAClB,CAAC;AAAA,EACH;AACF;AAKO,SAAS,uBACd,SACQ;AACR,SAAO,0CAA0C,QAAQ,IAAI;AAAA,aAClD,QAAQ,gBAAgB;AAAA,aACxB,QAAQ,MAAM,GAAG,KAAK;AACnC;AAKO,SAAS,YAAY,SAAqC;AAC/D,QAAM,oBAAoB,OAAO,QAAQ,QAAQ,OAAO,EACrD,IAAI,CAAC,CAAC,MAAM,IAAI,MAAM,GAAG,IAAI,IAAI,IAAI,EAAE,EACvC,KAAK,KAAK;AAEb,QAAM,gBAAgB,QAAQ,UAAU,YAAY,QAAQ,OAAO,KAAK;AAExE,QAAM,SAAS,QAAQ,UAAU;AAEjC,SAAO;AAAA,iCACwB,QAAQ,IAAI;AAAA;AAAA,QAErC,iBAAiB;AAAA;AAAA,eAEV,MAAM;AAAA,MACf,aAAa;AAAA,IACf,KAAK;AACT;AAKO,SAAS,cAAc,SAAuC;AACnE,SAAO,eAAe,QAAQ,gBAAgB;AAAA,YACpC,QAAQ,MAAM,GAAG,KAAK;AAClC;;;AC1HA,wBAA6B;AAC7B,qBAAe;AACf,uBAAiB;AACjB,kBAAiB;AAEV,IAAM,gBAAgB,CAACC,UAC5B,GAAGA,KAAI,QAAQ,KAAK,OAAO,EAAE,SAAS,CAAC,SAAS,KAAK,IAAI,CAAC;AAErD,IAAM,UAAU,CACrB,KACA,eACA,aACG;AACH,QAAM,QAAQ,eAAAC,QAAG,YAAY,GAAG;AAEhC,QAAM,QAAQ,CAAC,SAAS;AACtB,QAAI,eAAAA,QAAG,SAAS,iBAAAD,QAAK,KAAK,KAAK,IAAI,CAAC,EAAE,YAAY,GAAG;AACnD,iBAAW,QAAQ,iBAAAA,QAAK,KAAK,KAAK,IAAI,GAAG,eAAe,QAAQ;AAAA,IAClE,WAAW,KAAK,SAAS,aAAa,GAAG;AACvC,eAAS,KAAK,iBAAAA,QAAK,KAAK,KAAK,IAAI,CAAC;AAAA,IACpC;AAAA,EACF,CAAC;AAED,SAAO;AACT;AAEO,IAAM,cAAc,CAAC,aAAqB;AAC/C,QAAM,QAAQ;AACd,QAAM,UAAU,SAAS,MAAM,KAAK;AACpC,MAAI,WAAW,QAAQ,SAAS,GAAG;AACjC,WAAO,QAAQ,CAAC;AAAA,EAClB;AACA,SAAO;AACT;AAWO,IAAM,sBAAsB,CAAC;AAAA,EAClC;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AAAA,EACA;AACF,MAAoB;AAClB,QAAM,WACJ,WAAW,OAAO,OAAO,YAAY,MAAM,SAAS,UAAU;AAChE,UAAQ,IAAI,+BAA+B,QAAQ,MAAM,IAAI,IAAI,IAAI,EAAE;AACvE,aAAO,gCAAa;AAAA,IAClB,KAAK,GAAG,QAAQ,MAAM,IAAI,IAAI,IAAI;AAAA,IAClC;AAAA,IACA;AAAA,IACA;AAAA,EACF,CAAC;AACH;AAOO,IAAM,SAAoC,CAAC,QAAQ;AACxD,QAAM,MAAM,YAAAE,QAAK,QAAQ;AAAA,IACvB,MAAM;AAAA,IACN,QAAQ;AAAA,IACR,MAAM;AAAA,EACR,CAAC;AAED,MAAI,MAAM,KAAK,UAAU,iBAAE,cAAc,UAAW,IAAK,CAAC;AAC1D,MAAI,IAAI;AACV;;;ACjEO,IAAM,sBAAsB,CAAC,UAAiB;AACnD,MAAI,OAAO,UAAU,UAAU;AAE7B,QAAI,QAAQ,MAAM;AAAG,aAAO;AAC5B,WAAO;AAAA,EACT;AAGA,MAAI,OAAO,UAAU;AAAW,WAAO;AACvC,MAAI,iBAAiB;AAAM,WAAO;AAClC,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,UAAM,CAAC,MAAM,CAAC,IAAI;AAClB,WAAO;AAAA,EACT;AACA,SAAO;AACT;AAEO,IAAM,wBAAwB,CAAC,UAAe;AACnD,MAAI,MAAM,QAAQ,KAAK,GAAG;AACxB,UAAM,CAAC,MAAM,GAAG,IAAI;AACpB,QAAI,SAAS;AAAc,aAAO;AAAA,EACpC;AACA,SAAO;AACT;AAEO,SAAS,0BACd,gBACA,OACA;AAGA,SAAO,KAAK,cAAc,IAAI,oBAAoB,KAAK,CAAC;AAC1D;AAgBO,IAAM,MAAN,MAAM,KAAI;AAAA,EAIf,YAAY,YAA+B,WAAgC;AACzE,QAAI,WAAW,SAAS,MAAM,UAAU,QAAQ;AAC9C,UAAI,WAAW,WAAW,GAAG;AAC3B,cAAM,IAAI,UAAU,4BAA4B;AAAA,MAClD;AAEA,YAAM,IAAI;AAAA,QACR,YAAY,WAAW,MAAM,oBAC3B,WAAW,SAAS,CACtB;AAAA,MACF;AAAA,IACF;AAEA,UAAM,eAAe,UAAU;AAAA,MAC7B,CAAC,KAAa,UACZ,OAAO,iBAAiB,OAAM,MAAM,OAAO,SAAS;AAAA,MACtD;AAAA,IACF;AAEA,SAAK,SAAS,IAAI,MAAM,YAAY;AACpC,SAAK,UAAU,IAAI,MAAM,eAAe,CAAC;AAEzC,SAAK,QAAQ,CAAC,IAAI,WAAW,CAAC;AAI9B,QAAI,IAAI,GACN,MAAM;AACR,WAAO,IAAI,UAAU,QAAQ;AAC3B,YAAM,QAAQ,UAAU,GAAG;AAC3B,YAAM,YAAY,WAAW,CAAC;AAG9B,UAAI,iBAAiB,MAAK;AAExB,aAAK,QAAQ,GAAG,KAAK,MAAM,QAAQ,CAAC;AAEpC,YAAI,aAAa;AACjB,eAAO,aAAa,MAAM,OAAO,QAAQ;AACvC,eAAK,OAAO,KAAK,IAAI,MAAM,OAAO,YAAY;AAC9C,eAAK,QAAQ,GAAG,IAAI,MAAM,QAAQ,UAAU;AAAA,QAC9C;AAGA,aAAK,QAAQ,GAAG,KAAK;AAAA,MACvB,OAAO;AACL,aAAK,OAAO,KAAK,IAAI;AACrB,aAAK,QAAQ,GAAG,IAAI;AAAA,MACtB;AAAA,IACF;AAAA,EACF;AACF;AAEO,SAAS,IACd,YACG,QACH;AACA,SAAO,IAAI,IAAI,SAAS,MAAM;AAChC;AAEA,SAAS,iBAAiB,OAAmC;AAC3D,SAAO,UAAU,SAAY,KAAK;AACpC;AAEO,IAAM,cAAN,MAAkB;AAAA,EAEvB,YAAY,QAA0B;AACpC,SAAK,SAAS;AAAA,EAChB;AAAA,EAEM,MAAMC,MAAU;AAAA;AACpB,YAAM,qBAAqBA,KAAI,OAAO;AAAA,QAAI,CAAC,GAAG,MAC5C,0BAA0B,GAAG,CAAC;AAAA,MAChC;AAEA,YAAM,QAAQA,KAAI,QACf;AAAA,QAAI,CAAC,GAAG,MACP,KAAK,KAAK,GAAG,CAAC,GAAG,iBAAiB,mBAAmB,CAAC,CAAC,CAAC,KAAK;AAAA,MAC/D,EACC,KAAK,EAAE;AAEV,YAAM,eAAeA,KAAI,OAAO;AAAA,QAC9B,CAAC,KAA8B,GAAG,MAAO,iCACpC,MADoC;AAAA,UAEvC,CAAC,IAAI,CAAC,EAAE,GAAG,sBAAsB,CAAC;AAAA,QACpC;AAAA,QACA,CAAC;AAAA,MACH;AAEA,aAAO,KAAK,OAAO,MAAM;AAAA,QACvB;AAAA,QACA;AAAA,QACA,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA;AACF;AAEO,IAAM,qBAAqB;AAAA,EAChC,QAAQ,CAAC,UAAkB,CAAC,cAAc,KAAK;AAAA,EAC/C,OAAO,CAAC,UAAkB,CAAC,cAAc,KAAK;AAChD;AAEO,SAAS,aAAa;AAAA,EAC3B;AAAA,EACA,YAAY;AAAA,EACZ,SAAS;AAAA,EACT,SAAS;AACX,GAKG;AACD,MAAI,OAAO,WAAW,GAAG;AACvB,UAAM,IAAI;AAAA,MACR;AAAA,IACF;AAAA,EACF;AAEA,SAAO,IAAI;AAAA,IACT,CAAC,QAAQ,GAAG,MAAM,OAAO,SAAS,CAAC,EAAE,KAAK,SAAS,GAAG,MAAM;AAAA,IAC5D;AAAA,EACF;AACF;;;AH5KO,IAAK,kBAAL,kBAAKC,qBAAL;AACL,EAAAA,iBAAA,UAAO;AACP,EAAAA,iBAAA,gBAAa;AAFH,SAAAA;AAAA,GAAA;","names":["ClickHouseEngines","path","fs","http","sql","IngestionFormat"]}