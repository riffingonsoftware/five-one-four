import type { ConnBaseQueryParams, ConnCommandResult, Connection, ConnectionParams, ConnInsertParams, ConnInsertResult, ConnPingResult, ConnQueryResult } from '@clickhouse/client-common';
type WebInsertParams<T> = Omit<ConnInsertParams<ReadableStream<T>>, 'values'> & {
    values: string;
};
export type WebConnectionParams = ConnectionParams;
export declare class WebConnection implements Connection<ReadableStream> {
    private readonly params;
    private readonly defaultHeaders;
    constructor(params: WebConnectionParams);
    query(params: ConnBaseQueryParams): Promise<ConnQueryResult<ReadableStream<Uint8Array>>>;
    exec(params: ConnBaseQueryParams): Promise<ConnQueryResult<ReadableStream<Uint8Array>>>;
    command(params: ConnBaseQueryParams): Promise<ConnCommandResult>;
    insert<T = unknown>(params: WebInsertParams<T>): Promise<ConnInsertResult>;
    ping(): Promise<ConnPingResult>;
    close(): Promise<void>;
    private request;
    private runExec;
}
export {};
